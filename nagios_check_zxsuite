#!/usr/bin/perl
# Matija Nalis <malis-perl@axe.tomsoft.hr> GPLv3+, started 20150105
#
# nagios check for xzsuite licence expiration and available version updates
#
# it requires nagios util.pm and module Date::Parse
#
# you should also add nagios to /etc/sudoers for required commands, like:
# nagios ALL = (zimbra) NOPASSWD:/usr/lib/nagios/plugins/nagios_check_zxsuite
# and then run it in nagios NRPE check as:
# command[check_zxsuite]=sudo -u zimbra  /usr/lib/nagios/plugins/nagios_check_zxsuite


use warnings;
use strict;
use autodie;
use feature 'say';

use Date::Parse;
use lib '/usr/lib/nagios/plugins';
use utils qw /%ERRORS/;


my $VERSION = '1.08';
# FIXME help window, version, commandline parsing for warning/critical
my $DAYS_CRIT = 14;
my $DAYS_WARN = 30;

$ENV{PATH} .= ':/opt/zimbra/bin';
#my $CMD_CHECK_UPDATE = 'cat example/zimbra_update_check.txt';
#my $CMD_CHECK_LICENSE = 'cat example/zimbra_licence.txt';
my $CMD_CHECK_UPDATE = 'zxsuite core doCheckUpdate';
my $CMD_CHECK_LICENSE = 'zxsuite core getLicenseInfo';

my $NAGIOS_EXTRA = '';
my $NAGIOS_ERR = '';
my $NAGIOS_STATUS = 'OK';


# updates nagios status
sub update_status($$) {
    my ($level, $msg) = @_;
    if (!defined $ERRORS{$level}) { die "cannot access nagios ERRORS for level=$level" }
    $NAGIOS_STATUS = $level if $ERRORS{$level} > $ERRORS{$NAGIOS_STATUS};	# things can only can go from bad to worse, not the other way around
    $NAGIOS_ERR = "$msg, $NAGIOS_ERR";
}

#
# check for updates
#
my %Z = ();
open my $cmd_update, '-|', $CMD_CHECK_UPDATE;
while (<$cmd_update>) {
    next if /^\s*$/;	# skip empty lines
    chomp;
    my ($key, $value) = split (' ', $_, 2);
    $key =~ s/current/Current/;		# fix case so it is always mixed
    $key =~ s/available/Available/;
#    say "  key $key = $value";
    $Z{$key} = $value;
}


$NAGIOS_EXTRA .= "lastUpdate: $Z{'lastUpdate'}";

foreach my $cur (grep {/CurrentVersion/} keys %Z) {	# list all current versions
    my $avail = $cur; 
    $avail =~ s/Current/Available/;
    
    if (!defined($Z{$avail})) { die "can't find available_ counterpart to current key $cur" }
    if ($Z{$cur} ne $Z{$avail} and $Z{$avail} ne 'none') {
            update_status ('WARNING', "Update $avail: $Z{$avail}");
    }
    $NAGIOS_EXTRA .= ", $cur: $Z{$cur} => $Z{$avail}";
    
#    say "current $cur = $Z{$cur} => $avail = $Z{$avail}";
}

#
# check licenses
#

my %LIC = ();
open my $cmd_lic, '-|', $CMD_CHECK_LICENSE;
my $module = '';
my $m_spaces = '__NEVERHAPPENS__';
while (<$cmd_lic>) {
    next if /^\s*$/;	# skip empty lines
    chomp;
        
#    say "  lic $_";
    
    if (/^$m_spaces\S/) {
        #say 'detected modules end';
        $module = '';
        $m_spaces = '__NEVERHAPPENS__';
    } elsif (/^(\s+)modules\s*$/) {
        $m_spaces = $1;
       #say 'detected modules start';
    }
    
    
    my ($key, $value) = split (' ', $_, 2);
    if ($value eq '') {
        #say "value not defined for key=$key, assume module name";
        $module = $key;
    } else {
        my $fullkey = ($module?"${module}__":'') . $key;
        $LIC{$fullkey} = $value;
        #say "\t$fullkey = $value";
    }
}

#
# only critical status allowed below this line (and warnings above)
#

# license expire check
my $now = time();
my $end = str2time($LIC{'dateEnd'});
if (!defined($LIC{'dateEnd'})) {
    update_status('UNKNOWN', "cannot determine licence end date from $LIC{'dateEnd'}");
} else {
    my $days = int (($end - $now) / (24*60*60));
    #say "$days days remaining";
    if ($days <= $DAYS_CRIT) {
        update_status('CRITICAL', "License expires in $days days");
    } elsif ($days <= $DAYS_WARN) {
        update_status('WARNING', "License expires in $days days");
    }
}

# check submodule quantities
foreach my $k (grep {/__quantity/} keys %LIC) {
    next if ($LIC{$k} eq 'unlimited');
    update_status ('CRITICAL', "$k=$LIC{$k} > $LIC{'licensedUsers'}") if $LIC{$k} > $LIC{'licensedUsers'};
}

# check submodule licenses
foreach my $k (grep {/__licensed/} keys %LIC) {
    update_status ('CRITICAL', "$k=$LIC{$k}") if $LIC{$k} ne 'true';
}

update_status('CRITICAL', "isWithinGraceInterval=$LIC{'isWithinGraceInterval'}") if $LIC{'isWithinGraceInterval'} ne 'false';
update_status('CRITICAL', "Expired=$LIC{'expired'}") if $LIC{'expired'} ne 'false';
update_status('CRITICAL', "notYetValid=$LIC{'notYetValid'}") if $LIC{'notYetValid'} ne 'false';
update_status('CRITICAL', "accountCount=$LIC{'accountCount'} > $LIC{'licensedUsers'}") if $LIC{'accountCount'} > $LIC{'licensedUsers'};

$NAGIOS_EXTRA .= ", accountCount=$LIC{'accountCount'}/$LIC{'licensedUsers'}, dateStart=$LIC{'dateStart'}, dateEnd=$LIC{'dateEnd'}";



# finish, exit with calculated status and info
$NAGIOS_ERR =~ s/, $//;
print "$NAGIOS_STATUS";
print ": $NAGIOS_ERR" if $NAGIOS_ERR;
print "|$NAGIOS_EXTRA" if $NAGIOS_EXTRA;
print "\n";

exit $ERRORS{$NAGIOS_STATUS};

